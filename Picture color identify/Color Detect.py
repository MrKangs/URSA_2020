# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'D:\URSA_2020\Playing around with PyQt5\Day 3\Example3.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import numpy as np 
import cv2
import os

class Ui_MainWindow(object):
   
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 742)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.redMinSlider = QtWidgets.QSlider(self.centralwidget)
        self.redMinSlider.setGeometry(QtCore.QRect(200, 60, 211, 22))
        self.redMinSlider.setMaximum(255)
        self.redMinSlider.setOrientation(QtCore.Qt.Horizontal)
        self.redMinSlider.setObjectName("redMinSlider")

        self.redMinText = QtWidgets.QLabel(self.centralwidget)
        self.redMinText.setGeometry(QtCore.QRect(280, 30, 47, 13))
        self.redMinText.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.redMinText.setAlignment(QtCore.Qt.AlignCenter)
        self.redMinText.setObjectName("redMinText")

        self.redMinValue = QtWidgets.QLabel(self.centralwidget)
        self.redMinValue.setGeometry(QtCore.QRect(50, 60, 100, 50))
        self.redMinValue.setFrameShape(QtWidgets.QFrame.Box)
        self.redMinValue.setAlignment(QtCore.Qt.AlignCenter)
        self.redMinValue.setObjectName("redMinValue")
        self.redMinValue.setNum(0)

        self.imageLbl = QtWidgets.QLabel(self.centralwidget)
        self.imageLbl.setGeometry(QtCore.QRect(110, 150, 651, 541))
        self.imageLbl.setFrameShape(QtWidgets.QFrame.Box)
        self.imageLbl.setText("")
        self.imageLbl.setObjectName("imageLbl")

        self.imageBtn = QtWidgets.QPushButton(self.centralwidget)
        self.imageBtn.setGeometry(QtCore.QRect(20, 400, 75, 23))
        self.imageBtn.setObjectName("imageBtn")

        self.redMinBtn = QtWidgets.QPushButton(self.centralwidget)
        self.redMinBtn.setGeometry(QtCore.QRect(270, 90, 75, 23))
        self.redMinBtn.setObjectName("redMinBtn")

        self.redMaxText = QtWidgets.QLabel(self.centralwidget)
        self.redMaxText.setGeometry(QtCore.QRect(520, 30, 47, 13))
        self.redMaxText.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.redMaxText.setAlignment(QtCore.Qt.AlignCenter)
        self.redMaxText.setObjectName("redMaxText")

        self.redMaxBtn = QtWidgets.QPushButton(self.centralwidget)
        self.redMaxBtn.setGeometry(QtCore.QRect(510, 90, 75, 23))
        self.redMaxBtn.setObjectName("redMaxBtn")

        self.redMaxSlider = QtWidgets.QSlider(self.centralwidget)
        self.redMaxSlider.setGeometry(QtCore.QRect(440, 60, 211, 22))
        self.redMaxSlider.setMaximum(255)
        self.redMaxSlider.setOrientation(QtCore.Qt.Horizontal)
        self.redMaxSlider.setSliderPosition(255)
        self.redMaxSlider.setObjectName("redMaxSlider")

        self.redMaxValue = QtWidgets.QLabel(self.centralwidget)
        self.redMaxValue.setGeometry(QtCore.QRect(675, 60, 100, 50))
        self.redMaxValue.setFrameShape(QtWidgets.QFrame.Box)
        self.redMaxValue.setAlignment(QtCore.Qt.AlignCenter)
        self.redMaxValue.setObjectName("redMaxValue")
        self.redMaxValue.setNum(255)

        self.colorDetectCheck = QtWidgets.QCheckBox(self.centralwidget)
        self.colorDetectCheck.setGeometry(QtCore.QRect(20, 440, 71, 21))
        self.colorDetectCheck.setObjectName("colorDetectCheck")


        MainWindow.setCentralWidget(self.centralwidget)

        # Global Variables
        self.redMin = 0
        self.redMax = 255
        self.filePath = "No_Path"

        # Functions with Buttons
        self.imageBtn.clicked.connect(self.setImage)
        self.redMinBtn.clicked.connect(self.redMinUpdate)
        self.redMaxBtn.clicked.connect(self.redMaxUpdate)

        # Functions with CheckBox
        self.colorDetectCheck.stateChanged.connect(self.checkBoxSwitch)

        # Functions with Slider
        self.redMinSlider.valueChanged.connect(self.updateMinValues)
        self.redMaxSlider.valueChanged.connect(self.updateMaxValues)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Red Color Detector"))
        self.redMinText.setText(_translate("MainWindow", "Red Min"))
        self.imageBtn.setText(_translate("MainWindow", "Select Image"))
        self.redMinBtn.setText(_translate("MainWindow", "Confirm"))
        self.redMaxText.setText(_translate("MainWindow", "Red Max"))
        self.redMaxBtn.setText(_translate("MainWindow", "Confirm"))
        self.colorDetectCheck.setText(_translate("MainWindow", "Execute"))

    def setImage(self):
        fileName, _ = QtWidgets.QFileDialog.getOpenFileName(None, "Select Image", "", "Image Files (*.png *.jpg *jpeg *.bmp)") # Ask for file
        self.filePath = fileName
        if (fileName): # If the user gives a file
            pixmap = QtGui.QPixmap(fileName) # Setup pixmap with the provided image
            pixmap = pixmap.scaled(self.imageLbl.width(), self.imageLbl.height(), QtCore.Qt.KeepAspectRatio) # Scale pixmap
            self.imageLbl.setPixmap(pixmap) # Set the pixmap onto the label
            self.imageLbl.setAlignment(QtCore.Qt.AlignCenter) # Align the label to center

    def redMinUpdate(self):        
        self.redMin = self.redMinSlider.sliderPosition()
        
    def redMaxUpdate(self):
        self.redMax = self.redMaxSlider.sliderPosition()

    def updateMinValues(self):
        self.redMinValue.setNum(self.redMinSlider.sliderPosition())

    def updateMaxValues(self):
        self.redMaxValue.setNum(self.redMaxSlider.sliderPosition())

    def checkBoxSwitch(self):

        if (self.filePath == "No_Path") and (self.colorDetectCheck.isChecked() == True):
            self.error1()
            self.colorDetectCheck.setCheckState(0)

        elif (self.colorDetectCheck.isChecked()):
            self.color_detect()

        else:
            pixmap = QtGui.QPixmap(self.filePath) # Setup pixmap with the provided image
            pixmap = pixmap.scaled(self.imageLbl.width(), self.imageLbl.height(), QtCore.Qt.KeepAspectRatio) # Scale pixmap
            self.imageLbl.setPixmap(pixmap) # Set the pixmap onto the label
            self.imageLbl.setAlignment(QtCore.Qt.AlignCenter) # Align the label to center

    def error1(self):
        errorMessage1 = QtWidgets.QMessageBox()
        errorMessage1.setWindowTitle("Error")
        errorMessage1.setText("Please Select an Image File!")
        errorMessage1.setIcon(QtWidgets.QMessageBox.Critical)
        x = errorMessage1.exec_()

    def error2(self):
        errorMessage2 = QtWidgets.QMessageBox()
        errorMessage2.setWindowTitle("Error")
        errorMessage2.setText("Invalid Color Range!")
        errorMessage2.setIcon(QtWidgets.QMessageBox.Critical)
        x = errorMessage2.exec_()
        

    def color_detect(self):
        if(self.redMin > self.redMax):
            self.error2()
        else:
            # Adding a filter on the image just to detect red
            image = cv2.imread(self.filePath)
            self.redLower = np.array([0, 0, self.redMin], dtype = "uint8")
            self.redUpper = np.array([75, 75, self.redMax], dtype = "uint8")
            mask = cv2.inRange(image, self.redLower, self.redUpper)
            output = cv2.bitwise_and(image, image, mask = mask)
            
            # Create a new image so that the GUI will replace the picture
            cv2.imwrite("Red_Detection.png", output)
            fileName = "Red_Detection.png"
            
            # Same as setImage function
            pixmap = QtGui.QPixmap(fileName) # Setup pixmap with the provided image
            pixmap = pixmap.scaled(self.imageLbl.width(), self.imageLbl.height(), QtCore.Qt.KeepAspectRatio) # Scale pixmap
            self.imageLbl.setPixmap(pixmap) # Set the pixmap onto the label
            self.imageLbl.setAlignment(QtCore.Qt.AlignCenter) # Align the label to center
            
            # Remove the file that has the filter
            os.remove(fileName)

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
